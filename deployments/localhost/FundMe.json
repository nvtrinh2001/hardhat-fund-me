{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdef6a6f0be3f58f78604280e94704972dbbfc5dd73cebf775f699ed747c1da8c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1038562",
    "logsBloom": "0x
    "blockHash": "0x8d9f8a7dfdc5095e4102d03ef5975ae785fe2ddf331e6c896d150af680251ef9",
    "transactionHash": "0xdef6a6f0be3f58f78604280e94704972dbbfc5dd73cebf775f699ed747c1da8c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1038562",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "ec35ffdb3c1d56941f4a94907c8570c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Trinh V. Nguyen\",\"details\":\"This implements price feed as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feed as our library\"},\"withdraw()\":{\"details\":\"This implements price feed as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"},\"withdraw()\":{\"notice\":\"This function withdraws money from contract\"}},\"notice\":\"This contract is to demo a simple funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1, Pragma\\npragma solidity ^0.8.8;\\n\\n// 2, Import\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3, Error Codes\\nerror FundMe__NotOwner();\\n\\n// 4, Interfaces, Libraries, Contracts\\n\\n// NatSpec Format\\n/** @title A contract for crowd funding\\n*   @author Trinh V. Nguyen\\n    @notice This contract is to demo a simple funding contract\\n    @dev This implements price feed as our library\\n*/\\ncontract FundMe {\\n  // Type Declarations\\n  using PriceConverter for uint256;\\n\\n  // State variables\\n  mapping(address => uint256) private s_addressToAmountFunded;\\n  address[] private s_funders;\\n  // Could we make this constant?  /* hint: no! We should make it immutable! */\\n  address private immutable i_owner;\\n  uint256 public constant MINIMUM_USD = 50 * 10**18;\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  // Modifier\\n  modifier onlyOwner() {\\n    // require(msg.sender == owner);\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    _;\\n  }\\n\\n  // Functions\\n  // constructor\\n  constructor(address priceFeedAddress) {\\n    i_owner = msg.sender;\\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n  }\\n\\n  // receive\\n  receive() external payable {\\n    fund();\\n  }\\n\\n  // fallback\\n  fallback() external payable {\\n    fund();\\n  }\\n\\n  // external\\n  // public\\n  /** @notice This function funds this contract\\n   *   @dev This implements price feed as our library\\n   */\\n  function fund() public payable {\\n    require(\\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n      \\\"You need to spend more ETH!\\\"\\n    );\\n    // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n    s_addressToAmountFunded[msg.sender] += msg.value;\\n    s_funders.push(msg.sender);\\n  }\\n\\n  /** @notice This function withdraws money from contract\\n   *   @dev This implements price feed as our library\\n   */\\n  function withdraw() public payable onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  function cheaperWithdraw() public payable onlyOwner {\\n    address[] memory funders = s_funders;\\n    // mappings can't be in memory\\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n      address funder = funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  // internal\\n\\n  // private\\n\\n  // view/pure\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getFunders(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getAddressToAmountFunded(address funder)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return s_addressToAmountFunded[funder];\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\\n// Add s_ where the variables are stored in storage\\n\",\"keccak256\":\"0xacb1ddc821f061a9ca4c76c52d157982c9f62e285b75a2ecf9f4269fab85e6b0\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xb6270c86e57bfed077355468d6a934f19843e652c7ce8ecec9cde9e72c6fbac9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012e5380380620012e583398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161116c620001796000396000818161037d015281816105cc015261061c015261116c6000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101475780639e87a5cd14610172578063b60d42881461019d578063be2693f0146101a75761008e565b80630343fb25146100985780633a7b6c74146100d55780633ccfd60b146101125780636b69a5921461011c5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aa4565b6102eb565b6040516100cc9190610aea565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f79190610b31565b610333565b6040516101099190610b6d565b60405180910390f35b61011a61037b565b005b34801561012857600080fd5b506101316105bb565b60405161013e9190610aea565b60405180910390f35b34801561015357600080fd5b5061015c6105c8565b6040516101699190610b6d565b60405180910390f35b34801561017e57600080fd5b506101876105f0565b6040516101949190610be7565b60405180910390f35b6101a56101b1565b005b6101af61061a565b005b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108be90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c5f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027f9190610cae565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061034957610348610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610400576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104ab5760006001828154811061042657610425610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a390610d33565b915050610403565b50600067ffffffffffffffff8111156104c7576104c6610d7c565b5b6040519080825280602002602001820160405280156104f55781602001602082028036833780820191505090505b506001908051906020019061050b92919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161053290610ddc565b60006040518083038185875af1925050503d806000811461056f576040519150601f19603f3d011682016040523d82523d6000602084013e610574565b606091505b50509050806105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af90610e3d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d9575b5050505050905060005b81518110156107ad57600082828151811061074b5761074a610d04565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a590610d33565b91505061072d565b50600067ffffffffffffffff8111156107c9576107c8610d7c565b5b6040519080825280602002602001820160405280156107f75781602001602082028036833780820191505090505b506001908051906020019061080d92919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161083490610ddc565b60006040518083038185875af1925050503d8060008114610871576040519150601f19603f3d011682016040523d82523d6000602084013e610876565b606091505b50509050806108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b190610e3d565b60405180910390fd5b5050565b6000806108ca836108fa565b90506000670de0b6b3a764000085836108e39190610e5d565b6108ed9190610ee6565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610fa4565b5050509150506402540be40081610992919061101f565b915050919050565b828054828255906000526020600020908101928215610a13579160200282015b82811115610a125782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ba565b5b509050610a209190610a24565b5090565b5b80821115610a3d576000816000905550600101610a25565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7182610a46565b9050919050565b610a8181610a66565b8114610a8c57600080fd5b50565b600081359050610a9e81610a78565b92915050565b600060208284031215610aba57610ab9610a41565b5b6000610ac884828501610a8f565b91505092915050565b6000819050919050565b610ae481610ad1565b82525050565b6000602082019050610aff6000830184610adb565b92915050565b610b0e81610ad1565b8114610b1957600080fd5b50565b600081359050610b2b81610b05565b92915050565b600060208284031215610b4757610b46610a41565b5b6000610b5584828501610b1c565b91505092915050565b610b6781610a66565b82525050565b6000602082019050610b826000830184610b5e565b92915050565b6000819050919050565b6000610bad610ba8610ba384610a46565b610b88565b610a46565b9050919050565b6000610bbf82610b92565b9050919050565b6000610bd182610bb4565b9050919050565b610be181610bc6565b82525050565b6000602082019050610bfc6000830184610bd8565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c49601b83610c02565b9150610c5482610c13565b602082019050919050565b60006020820190508181036000830152610c7881610c3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb982610ad1565b9150610cc483610ad1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf957610cf8610c7f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d3e82610ad1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7157610d70610c7f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dc6600083610dab565b9150610dd182610db6565b600082019050919050565b6000610de782610db9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e27600b83610c02565b9150610e3282610df1565b602082019050919050565b60006020820190508181036000830152610e5681610e1a565b9050919050565b6000610e6882610ad1565b9150610e7383610ad1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eac57610eab610c7f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ef182610ad1565b9150610efc83610ad1565b925082610f0c57610f0b610eb7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f3681610f17565b8114610f4157600080fd5b50565b600081519050610f5381610f2d565b92915050565b6000819050919050565b610f6c81610f59565b8114610f7757600080fd5b50565b600081519050610f8981610f63565b92915050565b600081519050610f9e81610b05565b92915050565b600080600080600060a08688031215610fc057610fbf610a41565b5b6000610fce88828901610f44565b9550506020610fdf88828901610f7a565b9450506040610ff088828901610f8f565b935050606061100188828901610f8f565b925050608061101288828901610f44565b9150509295509295909350565b600061102a82610f59565b915061103583610f59565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561107457611073610c7f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110b1576110b0610c7f565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110ee576110ed610c7f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561112b5761112a610c7f565b5b82820290509291505056fea26469706673582212205cb0e1084a3d70589bdb6477583277026d6eb3ee329f0f19fa6d9100b0361d3364736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101475780639e87a5cd14610172578063b60d42881461019d578063be2693f0146101a75761008e565b80630343fb25146100985780633a7b6c74146100d55780633ccfd60b146101125780636b69a5921461011c5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aa4565b6102eb565b6040516100cc9190610aea565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f79190610b31565b610333565b6040516101099190610b6d565b60405180910390f35b61011a61037b565b005b34801561012857600080fd5b506101316105bb565b60405161013e9190610aea565b60405180910390f35b34801561015357600080fd5b5061015c6105c8565b6040516101699190610b6d565b60405180910390f35b34801561017e57600080fd5b506101876105f0565b6040516101949190610be7565b60405180910390f35b6101a56101b1565b005b6101af61061a565b005b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108be90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c5f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027f9190610cae565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061034957610348610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610400576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104ab5760006001828154811061042657610425610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a390610d33565b915050610403565b50600067ffffffffffffffff8111156104c7576104c6610d7c565b5b6040519080825280602002602001820160405280156104f55781602001602082028036833780820191505090505b506001908051906020019061050b92919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161053290610ddc565b60006040518083038185875af1925050503d806000811461056f576040519150601f19603f3d011682016040523d82523d6000602084013e610574565b606091505b50509050806105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af90610e3d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d9575b5050505050905060005b81518110156107ad57600082828151811061074b5761074a610d04565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a590610d33565b91505061072d565b50600067ffffffffffffffff8111156107c9576107c8610d7c565b5b6040519080825280602002602001820160405280156107f75781602001602082028036833780820191505090505b506001908051906020019061080d92919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161083490610ddc565b60006040518083038185875af1925050503d8060008114610871576040519150601f19603f3d011682016040523d82523d6000602084013e610876565b606091505b50509050806108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b190610e3d565b60405180910390fd5b5050565b6000806108ca836108fa565b90506000670de0b6b3a764000085836108e39190610e5d565b6108ed9190610ee6565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610fa4565b5050509150506402540be40081610992919061101f565b915050919050565b828054828255906000526020600020908101928215610a13579160200282015b82811115610a125782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ba565b5b509050610a209190610a24565b5090565b5b80821115610a3d576000816000905550600101610a25565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7182610a46565b9050919050565b610a8181610a66565b8114610a8c57600080fd5b50565b600081359050610a9e81610a78565b92915050565b600060208284031215610aba57610ab9610a41565b5b6000610ac884828501610a8f565b91505092915050565b6000819050919050565b610ae481610ad1565b82525050565b6000602082019050610aff6000830184610adb565b92915050565b610b0e81610ad1565b8114610b1957600080fd5b50565b600081359050610b2b81610b05565b92915050565b600060208284031215610b4757610b46610a41565b5b6000610b5584828501610b1c565b91505092915050565b610b6781610a66565b82525050565b6000602082019050610b826000830184610b5e565b92915050565b6000819050919050565b6000610bad610ba8610ba384610a46565b610b88565b610a46565b9050919050565b6000610bbf82610b92565b9050919050565b6000610bd182610bb4565b9050919050565b610be181610bc6565b82525050565b6000602082019050610bfc6000830184610bd8565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c49601b83610c02565b9150610c5482610c13565b602082019050919050565b60006020820190508181036000830152610c7881610c3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb982610ad1565b9150610cc483610ad1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf957610cf8610c7f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d3e82610ad1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7157610d70610c7f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dc6600083610dab565b9150610dd182610db6565b600082019050919050565b6000610de782610db9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e27600b83610c02565b9150610e3282610df1565b602082019050919050565b60006020820190508181036000830152610e5681610e1a565b9050919050565b6000610e6882610ad1565b9150610e7383610ad1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eac57610eab610c7f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ef182610ad1565b9150610efc83610ad1565b925082610f0c57610f0b610eb7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f3681610f17565b8114610f4157600080fd5b50565b600081519050610f5381610f2d565b92915050565b6000819050919050565b610f6c81610f59565b8114610f7757600080fd5b50565b600081519050610f8981610f63565b92915050565b600081519050610f9e81610b05565b92915050565b600080600080600060a08688031215610fc057610fbf610a41565b5b6000610fce88828901610f44565b9550506020610fdf88828901610f7a565b9450506040610ff088828901610f8f565b935050606061100188828901610f8f565b925050608061101288828901610f44565b9150509295509295909350565b600061102a82610f59565b915061103583610f59565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561107457611073610c7f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110b1576110b0610c7f565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110ee576110ed610c7f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561112b5761112a610c7f565b5b82820290509291505056fea26469706673582212205cb0e1084a3d70589bdb6477583277026d6eb3ee329f0f19fa6d9100b0361d3364736f6c63430008090033",
  "devdoc": {
    "author": "Trinh V. Nguyen",
    "details": "This implements price feed as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feed as our library"
      },
      "withdraw()": {
        "details": "This implements price feed as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      },
      "withdraw()": {
        "notice": "This function withdraws money from contract"
      }
    },
    "notice": "This contract is to demo a simple funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}